/**
 * Copyright Â© 2017 Infest Developer Team.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * * Neither the name of the copyright holder nor the names of its contributors
 *   may be used to endorse or promote products derived from this software 
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.jogjadamai.infest.administrator;

/**
 * <h1>class <code>FirstTimeConfiguration</code></h1>
 * <p><code>FirstTimeConfiguration</code> is class defining <code>main()</code> to run the
 * application.</p>
 * <br>
 * <p><b><i>Coded, built, and packaged with passion by Danang Galuh Tegar P for Infest.</i></b></p>
 * 
 * @author Danang Galuh Tegar P
 * @version 2017.03.10.0001
 */
public class FirstTimeConfiguration extends javax.swing.JFrame {

    private static final String DEFAULT_SERVER_ADDRESS = "127.0.0.1";
    
    /**
     * Creates new form Program
     */
    public FirstTimeConfiguration() {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FirstTimeConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        setCredentials();
        initValues();
    }
    
    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        serverAddressLabel = new javax.swing.JLabel();
        credentialSaltLabel = new javax.swing.JLabel();
        serverAddressField = new javax.swing.JTextField();
        saltField = new javax.swing.JTextField();
        generateButton = new javax.swing.JButton();
        saveConfigurationButton = new javax.swing.JButton();
        noticeLabel = new javax.swing.JLabel();
        isValidServerAddressLabel = new javax.swing.JLabel();
        setCustomSaltCheckBox = new javax.swing.JCheckBox();
        setCustomServerAddressCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INFEST: First Time Configuration");
        setAlwaysOnTop(true);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/com/jogjadamai/infest/assets/InfestIcon.png")).getImage());
        setMinimumSize(new java.awt.Dimension(413, 300));
        setName("settingFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(413, 300));

        serverAddressLabel.setText("Server Address");
        serverAddressLabel.setDoubleBuffered(true);

        credentialSaltLabel.setText("Credentials Salt");
        credentialSaltLabel.setDoubleBuffered(true);

        serverAddressField.setDoubleBuffered(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, setCustomServerAddressCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), serverAddressField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        serverAddressField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverAddressFieldActionPerformed(evt);
            }
        });
        serverAddressField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serverAddressFieldKeyReleased(evt);
            }
        });

        saltField.setDoubleBuffered(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, setCustomSaltCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), saltField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        saltField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saltFieldActionPerformed(evt);
            }
        });
        saltField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                saltFieldKeyReleased(evt);
            }
        });

        generateButton.setText("Generate");
        generateButton.setDoubleBuffered(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, setCustomSaltCheckBox, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), generateButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        saveConfigurationButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        saveConfigurationButton.setText("Save Configuration");
        saveConfigurationButton.setDoubleBuffered(true);
        saveConfigurationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigurationButtonActionPerformed(evt);
            }
        });

        noticeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        noticeLabel.setText("<html>\nNOTICE:<br>\nPlease make sure to verify configuration of Infest Operator and Infest Customer after then.");
        noticeLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        noticeLabel.setDoubleBuffered(true);

        isValidServerAddressLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        isValidServerAddressLabel.setText("{isValid}");
        isValidServerAddressLabel.setDoubleBuffered(true);

        setCustomSaltCheckBox.setText("Set a custom Credentials Salt");
        setCustomSaltCheckBox.setDoubleBuffered(true);
        setCustomSaltCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                setCustomSaltCheckBoxItemStateChanged(evt);
            }
        });

        setCustomServerAddressCheckBox.setText("Set a custom Server Address");
        setCustomServerAddressCheckBox.setToolTipText("");
        setCustomServerAddressCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                setCustomServerAddressCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(credentialSaltLabel)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(generateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(setCustomSaltCheckBox))
                                    .addComponent(saltField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(saveConfigurationButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverAddressLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setCustomServerAddressCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(isValidServerAddressLabel))
                            .addComponent(serverAddressField))))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noticeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverAddressLabel)
                    .addComponent(serverAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isValidServerAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setCustomServerAddressCheckBox))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credentialSaltLabel)
                    .addComponent(saltField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateButton)
                    .addComponent(setCustomSaltCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noticeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveConfigurationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // TODO add your handling code here:
        saltField.setText(generateSalt());
    }//GEN-LAST:event_generateButtonActionPerformed

    private void saveConfigurationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigurationButtonActionPerformed
        // TODO add your handling code here:
        if(serverAddressField.getText().isEmpty() || saltField.getText().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Please configure BOTH Server Address and Credentials Salt.",
                    "INFEST: Program Configuration Manager",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            if(isServerAddressValid) {
                saveConfiguration();
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Yups, all is done!\n"
                                + "\n"
                                + "Congratulation, you now have Infest Program installed and configured\n"
                                + "on this computer! (Later, you could change the configuration through\n"
                                + "Setting)", 
                        "INFEST: Program Configuration Manager", 
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                createCredentials();
                administrator.onFirstRun();
                dispose();
            } else {
                if(javax.swing.JOptionPane.showConfirmDialog(this,
                        "We detected that Server Address is not a Valid URL.\n"
                                + "\n"
                                + "Do you want to proceed anyway?", 
                        "INFEST: Program Configuration Manager", 
                        javax.swing.JOptionPane.YES_NO_OPTION, 
                        javax.swing.JOptionPane.WARNING_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
                    saveConfiguration();
                    javax.swing.JOptionPane.showMessageDialog(this,
                        "Yups, all is done!\n"
                                + "\n"
                                + "Congratulation, you now have Infest Program installed and configured\n"
                                + "on this computer! (Later, you could change the configuration through\n"
                                + "Setting)", 
                        "INFEST: Program Configuration Manager", 
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    createCredentials();
                    administrator.onFirstRun();
                    dispose();
                }
            }
        }
    }//GEN-LAST:event_saveConfigurationButtonActionPerformed

    private void serverAddressFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serverAddressFieldKeyReleased
        // TODO add your handling code here:
        verifyServerAddressValidity();
        isServerAddressNew = !serverAddressField.getText().equals(currentServerAddress);
        serverAddressLabel.setForeground(isServerAddressNew ? java.awt.Color.BLUE : java.awt.Color.BLACK);
    }//GEN-LAST:event_serverAddressFieldKeyReleased

    private void serverAddressFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverAddressFieldActionPerformed
        // TODO add your handling code here:
        saveConfigurationButtonActionPerformed(evt);
    }//GEN-LAST:event_serverAddressFieldActionPerformed

    private void saltFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saltFieldActionPerformed
        // TODO add your handling code here:
        saveConfigurationButtonActionPerformed(evt);
    }//GEN-LAST:event_saltFieldActionPerformed

    private void setCustomSaltCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_setCustomSaltCheckBoxItemStateChanged
        // TODO add your handling code here:
        isSaltNew = !saltField.getText().equals(currentSalt);
        noticeLabel.setVisible(isSaltNew);
        credentialSaltLabel.setForeground(isSaltNew ? java.awt.Color.BLUE : java.awt.Color.BLACK);
    }//GEN-LAST:event_setCustomSaltCheckBoxItemStateChanged

    private void saltFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saltFieldKeyReleased
        // TODO add your handling code here:
        isSaltNew = !saltField.getText().equals(currentSalt);
        noticeLabel.setVisible(isSaltNew);
        credentialSaltLabel.setForeground(isSaltNew ? java.awt.Color.BLUE : java.awt.Color.BLACK);
    }//GEN-LAST:event_saltFieldKeyReleased

    private void setCustomServerAddressCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_setCustomServerAddressCheckBoxItemStateChanged
        // TODO add your handling code here:
        serverAddressField.setText(setCustomServerAddressCheckBox.isSelected() ? currentServerAddress : DEFAULT_SERVER_ADDRESS);
        isServerAddressNew = !serverAddressField.getText().equals(currentServerAddress);
        serverAddressLabel.setForeground(isServerAddressNew ? java.awt.Color.BLUE : java.awt.Color.BLACK);
    }//GEN-LAST:event_setCustomServerAddressCheckBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel credentialSaltLabel;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel isValidServerAddressLabel;
    private javax.swing.JLabel noticeLabel;
    private javax.swing.JTextField saltField;
    private javax.swing.JButton saveConfigurationButton;
    private javax.swing.JTextField serverAddressField;
    private javax.swing.JLabel serverAddressLabel;
    private javax.swing.JCheckBox setCustomSaltCheckBox;
    private javax.swing.JCheckBox setCustomServerAddressCheckBox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private Boolean isServerAddressValid;
    private Boolean isServerAddressNew, isSaltNew;
    private String currentServerAddress, currentSalt;
    private String username;
    private char[] password;
    private com.jogjadamai.infest.administrator.Administrator administrator;
    
    private void setCredentials() {
        
        Boolean isContainSpace;
        
        username  = askUsername();
        isContainSpace = false;
        for(char c : username.toCharArray()) if(c == ' ') isContainSpace = true;
        while(username.isEmpty() || isContainSpace) {
            if(username.isEmpty()) showErrorDialog("Username cannot be empty! Please try again.");
            else if(isContainSpace) showErrorDialog("Username cannot contains space! Please try again.");
            else showErrorDialog("Cannot save that as an username! Please try again.");
            username  = askUsername();
            isContainSpace = false;
            for(char c : username.toCharArray()) if(c == ' ') isContainSpace = true;
        }
        password = askPassword();
        isContainSpace = false;
        for(char c : password) if(c == ' ') isContainSpace = true;
        while(password.length < 8 || isContainSpace) {
            if(password.length <= 0) showErrorDialog("Password cannot be empty! Please try again.");
            else if(password.length < 8) showErrorDialog("Please set a password with minimum of 8 characters! Please try again.");
            else if(isContainSpace) showErrorDialog("Password cannot contains space! Please try again.");
            else showErrorDialog("Cannot save that as an password! Please try again.");
            password = askPassword();
            isContainSpace = false;
            for(char c : password) if(c == ' ') isContainSpace = true;
        }
        
        administrator = com.jogjadamai.infest.administrator.Administrator.getInstance();
        
        javax.swing.JOptionPane.showMessageDialog(this,
                "Your Administrator Credentials has been set up!\n"
                        + "\n"
                        + "It's almost done! We only need some more else...",
                "INFEST: Program Configuration Manager",
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    private String askUsername() {
        String response = javax.swing.JOptionPane.showInputDialog(this, 
                "Please input an Administrator Username.\n"
                        + "REMEMBER: Administrator Username CANNOT be change later.\n\n", 
                "INFEST: Program Configuration Manager", javax.swing.JOptionPane.QUESTION_MESSAGE);
        while(response == null) {
            response = javax.swing.JOptionPane.showInputDialog(this, 
                "Please input an Administrator Username.\n"
                        + "REMEMBER: Administrator Username CANNOT be change later.\n\n", 
                "INFEST: Program Configuration Manager", javax.swing.JOptionPane.QUESTION_MESSAGE);
        }
        return response.trim();
    }
    
    private char[] askPassword() {
        String response = javax.swing.JOptionPane.showInputDialog(this,
                "Please input an Administrator Password.\n"
                        + "You may change Administrator Password later.\n\n", 
                "INFEST: Program Configuration Manager", javax.swing.JOptionPane.QUESTION_MESSAGE);
        while(response == null) {
            response = javax.swing.JOptionPane.showInputDialog(this,
                "Please input an Administrator Password.\n"
                        + "You may change Administrator Password later.\n\n", 
                "INFEST: Program Configuration Manager", javax.swing.JOptionPane.QUESTION_MESSAGE);
        }
        return response.trim().toCharArray();
    }
    
    private void showErrorDialog(String message) {
        javax.swing.JOptionPane.showMessageDialog(this, message, "INFEST: Program Configuration Manager", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    
    private void initValues() {
        setLocationRelativeTo(null);
        currentServerAddress = DEFAULT_SERVER_ADDRESS;
        if(!currentServerAddress.equals(DEFAULT_SERVER_ADDRESS) && !setCustomServerAddressCheckBox.isSelected()) setCustomServerAddressCheckBox.setSelected(true);
        currentSalt = "";
        serverAddressField.setText(currentServerAddress);
        saltField.setText(currentSalt);
        isServerAddressNew = false;
        isSaltNew = false;
        noticeLabel.setVisible(isSaltNew);
        serverAddressLabel.setForeground(isServerAddressNew ? java.awt.Color.BLUE : java.awt.Color.BLACK);
        credentialSaltLabel.setForeground(isSaltNew ? java.awt.Color.BLUE : java.awt.Color.BLACK);
        verifyServerAddressValidity();
        System.err.println("[INFEST] " + "Current Server Address   : " + currentServerAddress);
        System.err.println("[INFEST] " + "Current Credentials Salt : " + currentSalt);
    }
    
    private void verifyServerAddressValidity() {
        if(serverAddressField.getText().length() != 0) {      
            org.apache.commons.validator.UrlValidator urlValidator = new org.apache.commons.validator.UrlValidator();
            if (urlValidator.isValid("http://" + serverAddressField.getText())) {
               isValidServerAddressLabel.setText("Valid URL.");
               isValidServerAddressLabel.setForeground(java.awt.Color.BLUE);
               isServerAddressValid = true;
            } else {
               isValidServerAddressLabel.setText("Invalid URL.");
               isValidServerAddressLabel.setForeground(java.awt.Color.RED);
               isServerAddressValid = false;
            }
        } else {
            isValidServerAddressLabel.setText("");
            isServerAddressValid = false;
        }
    }
    
    private String generateSalt() {
        isSaltNew = true;
        noticeLabel.setVisible(isSaltNew);
        java.security.SecureRandom secureRandom;
        byte[] saltBytes = new byte[32];
        String salt;
        try {
            secureRandom = java.security.SecureRandom.getInstance("SHA1PRNG");
            secureRandom.nextBytes(saltBytes);
        } catch (java.security.NoSuchAlgorithmException ex) {
            System.err.println("[INFEST] " + ex);
            secureRandom = new java.security.SecureRandom();
            secureRandom.nextBytes(saltBytes);
        } finally {
            salt = java.util.Base64.getEncoder().encodeToString(saltBytes);
        }
        System.err.println("[INFEST] " + "New Salt Generated       : " + salt);
        return salt;
    }
    
    private void saveConfiguration() {
        com.jogjadamai.infest.service.ProgramPropertiesManager ppm;
        ppm = com.jogjadamai.infest.service.ProgramPropertiesManager.getInstance();
        String serverAddress = (serverAddressField.getText().length() != 0) ? serverAddressField.getText() : null;
        String salt = (saltField.getText().length() != 0) ? saltField.getText() : null;
        if(serverAddress != null) {
            ppm.setProperty("serveraddress", serverAddress.trim());
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You left Server Address blank. Nothing will be change in current Server Address configuration.", "INFEST: Program Configuration Manager", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
        if(isSaltNew) {
            java.io.File administratorCredentials = new java.io.File(com.jogjadamai.infest.communication.IProtocolClient.Type.ADMINISTRATOR.name().toLowerCase() + ".crd");
            java.io.File operatorCredentials = new java.io.File(com.jogjadamai.infest.communication.IProtocolClient.Type.OPERATOR.name().toLowerCase() + ".crd");
            if (administratorCredentials.delete()) System.err.println("[INFEST] " + "Administrator Credentials file deleted.");
            if (operatorCredentials.delete()) System.err.println("[INFEST] " + "Operator Credentials file deleted.");
            
        }
        if(salt != null) {
            ppm.setProperty("salt", salt.trim());
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You left Salt blank. Credentials cannot be saved without Salt.", "INFEST: Program Configuration Manager", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
        ppm.setProperty("autoconfiguration", "true");
        System.err.println("[INFEST] " + "New configuration has been saved!");
    }
    
    private void createCredentials() {
        administrator.createCredentials(com.jogjadamai.infest.communication.IProtocolClient.Type.ADMINISTRATOR, username, password);
    }
}
